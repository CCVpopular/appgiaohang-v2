{
  "info": {
    "_postman_id": "fb28d5c4-5e7c-4bae-82a2-1cbdae51b12e",
    "name": "AppGiaoHang - Stores & Foods API Tests",
    "description": "Collection for testing Stores and Foods API endpoints in appgiaohang-v2",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "1",
      "type": "string"
    },
    {
      "key": "storeId",
      "value": "1",
      "type": "string"
    },
    {
      "key": "foodId",
      "value": "1",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Stores",
      "item": [
        {
          "name": "Create Store",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Test Store\",\n    \"address\": \"123 Test Street\",\n    \"phone_number\": \"1234567890\",\n    \"owner_id\": \"{{userId}}\",\n    \"latitude\": 10.7756587,\n    \"longitude\": 106.7004238\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/stores",
              "host": ["{{baseUrl}}"],
              "path": ["stores"]
            },
            "description": "Create a new store"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has store information\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('address');",
                  "    pm.expect(jsonData).to.have.property('phone_number');",
                  "    pm.expect(jsonData).to.have.property('owner_id');",
                  "    ",
                  "    // Store the store ID for future tests",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set('storeId', jsonData.id);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Update Store",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Updated Test Store\",\n    \"address\": \"456 New Street\",\n    \"phone_number\": \"0987654321\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/stores/{{storeId}}",
              "host": ["{{baseUrl}}"],
              "path": ["stores", "{{storeId}}"]
            },
            "description": "Update store information"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has updated store information\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData.name).to.eql('Updated Test Store');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Update Store Status",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"is_active\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/stores/{{storeId}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["stores", "{{storeId}}", "status"]
            },
            "description": "Update store active status"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success property\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Get All Approved Stores",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/stores/user",
              "host": ["{{baseUrl}}"],
              "path": ["stores", "user"]
            },
            "description": "Get all approved and active stores"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Get User Stores",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/stores/user/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["stores", "user", "{{userId}}"]
            },
            "description": "Get stores owned by a specific user"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Get Pending Stores",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/stores/pending",
              "host": ["{{baseUrl}}"],
              "path": ["stores", "pending"]
            },
            "description": "Get all stores pending approval"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Get Store Details",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/stores/{{storeId}}",
              "host": ["{{baseUrl}}"],
              "path": ["stores", "{{storeId}}"]
            },
            "description": "Get details of a specific store"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has store properties\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('address');",
                  "    pm.expect(jsonData).to.have.property('phone_number');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Update Store Approval",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"status\": \"approved\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/stores/{{storeId}}/approval",
              "host": ["{{baseUrl}}"],
              "path": ["stores", "{{storeId}}", "approval"]
            },
            "description": "Update store approval status"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success property\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "response": []
        }
      ]
    },
    {
      "name": "Foods",
      "item": [
        {
          "name": "Create Food",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Test Food\",\n    \"description\": \"Delicious test food\",\n    \"price\": 10.99,\n    \"storeId\": \"{{storeId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/foods",
              "host": ["{{baseUrl}}"],
              "path": ["foods"]
            },
            "description": "Create a new food item"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has food information\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('description');",
                  "    pm.expect(jsonData).to.have.property('price');",
                  "    pm.expect(jsonData).to.have.property('storeId');",
                  "    ",
                  "    // Store the food ID for future tests",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set('foodId', jsonData.id);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Get Foods by Store",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/foods/store/{{storeId}}",
              "host": ["{{baseUrl}}"],
              "path": ["foods", "store", "{{storeId}}"]
            },
            "description": "Get all foods for a specific store"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Update Food",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Updated Test Food\",\n    \"description\": \"Updated delicious test food\",\n    \"price\": 12.99\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/foods/{{foodId}}",
              "host": ["{{baseUrl}}"],
              "path": ["foods", "{{foodId}}"]
            },
            "description": "Update a food item"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has updated food information\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData.name).to.eql('Updated Test Food');",
                  "    pm.expect(jsonData.price).to.eql(12.99);",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Delete Food",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/foods/{{foodId}}",
              "host": ["{{baseUrl}}"],
              "path": ["foods", "{{foodId}}"]
            },
            "description": "Delete a food item"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success property\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Get Food Statistics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/foods/statistics/{{storeId}}",
              "host": ["{{baseUrl}}"],
              "path": ["foods", "statistics", "{{storeId}}"]
            },
            "description": "Get food statistics for a store"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has statistics information\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('monthly_statistics');",
                  "    pm.expect(jsonData).to.have.property('popular_items');",
                  "    pm.expect(jsonData).to.have.property('overall_statistics');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        }
      ]
    }
  ]
} 