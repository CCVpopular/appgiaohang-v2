{
  "info": {
    "_postman_id": "a3b9d71c-e6a4-4ee3-8a16-9da96e3fe1d9",
    "name": "AppGiaoHang - Misc API Tests",
    "description": "Collection for testing various API endpoints (Addresses, Agora, Chat, Earnings, Transactions) in appgiaohang-v2",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "1",
      "type": "string"
    },
    {
      "key": "orderId",
      "value": "1",
      "type": "string"
    },
    {
      "key": "shipperId",
      "value": "2",
      "type": "string"
    },
    {
      "key": "addressId",
      "value": "1",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Addresses",
      "item": [
        {
          "name": "Add or Update Address",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"userId\": \"{{userId}}\",\n    \"address\": \"123 Test Street\",\n    \"latitude\": 10.7758439,\n    \"longitude\": 106.7017555\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/addresses",
              "host": ["{{baseUrl}}"],
              "path": ["addresses"]
            },
            "description": "Add a new address or update an existing one"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201 or 200\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Response has message and addressId\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('addressId');",
                  "    ",
                  "    // Store the address ID for future tests",
                  "    if (jsonData.addressId) {",
                  "        pm.collectionVariables.set('addressId', jsonData.addressId);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Get User Addresses",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/addresses/user/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["addresses", "user", "{{userId}}"]
            },
            "description": "Get addresses for a specific user"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Update Selected Address",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"userId\": \"{{userId}}\",\n    \"address\": \"123 Test Street\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/addresses/select",
              "host": ["{{baseUrl}}"],
              "path": ["addresses", "select"]
            },
            "description": "Set the selected address for a user"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has expected message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.eql('Selected address updated successfully');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        }
      ]
    },
    {
      "name": "Agora",
      "item": [
        {
          "name": "Generate Agora Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"channelName\": \"test_channel\",\n    \"uid\": 123456\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/agora/token",
              "host": ["{{baseUrl}}"],
              "path": ["agora", "token"]
            },
            "description": "Generate an Agora token for video calls"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('token');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        }
      ]
    },
    {
      "name": "Chat",
      "item": [
        {
          "name": "Get Chat Messages",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/chat/{{orderId}}",
              "host": ["{{baseUrl}}"],
              "path": ["chat", "{{orderId}}"]
            },
            "description": "Get chat messages for an order"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Send Chat Message",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"orderId\": \"{{orderId}}\",\n    \"senderId\": \"{{userId}}\",\n    \"receiverId\": \"{{shipperId}}\",\n    \"message\": \"Hello, this is a test message\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/chat",
              "host": ["{{baseUrl}}"],
              "path": ["chat"]
            },
            "description": "Send a new chat message"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has id\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        }
      ]
    },
    {
      "name": "Earnings",
      "item": [
        {
          "name": "Get Shipper Earnings",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/earnings/shipper/{{shipperId}}",
              "host": ["{{baseUrl}}"],
              "path": ["earnings", "shipper", "{{shipperId}}"]
            },
            "description": "Get earnings summary for a shipper"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has earnings information\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('totalEarnings');",
                  "    pm.expect(jsonData).to.have.property('todayEarnings');",
                  "    pm.expect(jsonData).to.have.property('weekEarnings');",
                  "    pm.expect(jsonData).to.have.property('monthEarnings');",
                  "    pm.expect(jsonData).to.have.property('history');",
                  "    pm.expect(jsonData.history).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Record Delivery Earnings",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"shipperId\": \"{{shipperId}}\",\n    \"orderId\": \"{{orderId}}\",\n    \"amount\": 5\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/earnings/delivery-complete",
              "host": ["{{baseUrl}}"],
              "path": ["earnings", "delivery-complete"]
            },
            "description": "Record earnings for a completed delivery"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has expected message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.eql('Earnings recorded successfully');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Get Admin Earnings",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/earnings/admin",
              "host": ["{{baseUrl}}"],
              "path": ["earnings", "admin"]
            },
            "description": "Get earnings statistics for admin"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has revenue information\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('itemRevenue');",
                  "    pm.expect(jsonData).to.have.property('shippingRevenue');",
                  "    pm.expect(jsonData).to.have.property('history');",
                  "    pm.expect(jsonData.history).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        }
      ]
    },
    {
      "name": "Transactions",
      "item": [
        {
          "name": "Get User Balance",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/transactions/balance/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["transactions", "balance", "{{userId}}"]
            },
            "description": "Get user balance"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has balance\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('balance');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Deposit Money",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"userId\": \"{{userId}}\",\n    \"amount\": 100\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/transactions/deposit",
              "host": ["{{baseUrl}}"],
              "path": ["transactions", "deposit"]
            },
            "description": "Deposit money to user balance"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has expected message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.eql('Deposit successful');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Get Transaction History",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/transactions/history/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["transactions", "history", "{{userId}}"]
            },
            "description": "Get transaction history for a user"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        }
      ]
    }
  ]
} 