{
  "info": {
    "_postman_id": "7592ceaa-09ce-4a88-9db0-cded15ad7c82",
    "name": "AppGiaoHang - Auth API Tests",
    "description": "Collection for testing Auth API endpoints in appgiaohang-v2",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "1",
      "type": "string"
    },
    {
      "key": "userEmail",
      "value": "test@example.com",
      "type": "string"
    },
    {
      "key": "userPassword",
      "value": "password123",
      "type": "string"
    },
    {
      "key": "userOtp",
      "value": "123456",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Send OTP",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"email\": \"{{userEmail}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/auth/send-otp",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "send-otp"]
        },
        "description": "Send OTP to user's email"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has expected message\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('message');",
              "    pm.expect(jsonData.message).to.eql('OTP sent successfully');",
              "});"
            ]
          }
        }
      ],
      "response": []
    },
    {
      "name": "Verify OTP",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"email\": \"{{userEmail}}\",\n    \"otp\": \"{{userOtp}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/auth/verify-otp",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "verify-otp"]
        },
        "description": "Verify OTP sent to user's email"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has expected message\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('message');",
              "    pm.expect(jsonData.message).to.eql('OTP verified successfully');",
              "});"
            ]
          }
        }
      ],
      "response": []
    },
    {
      "name": "Register User",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"email\": \"{{userEmail}}\",\n    \"password\": \"{{userPassword}}\",\n    \"fullName\": \"Test User\",\n    \"phoneNumber\": \"1234567890\",\n    \"otp\": \"{{userOtp}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/auth/register",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "register"]
        },
        "description": "Register a new user"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test(\"Response has expected message\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('message');",
              "    pm.expect(jsonData.message).to.eql('User registered successfully');",
              "});",
              "",
              "pm.test(\"Response has userId\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('userId');",
              "    ",
              "    // Store the user ID for future tests",
              "    if (jsonData.userId) {",
              "        pm.collectionVariables.set('userId', jsonData.userId);",
              "    }",
              "});"
            ]
          }
        }
      ],
      "response": []
    },
    {
      "name": "Login",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"email\": \"{{userEmail}}\",\n    \"password\": \"{{userPassword}}\",\n    \"fcmToken\": \"sample_fcm_token\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/auth/login",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "login"]
        },
        "description": "Login with user credentials"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has user information\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData).to.have.property('email');",
              "    pm.expect(jsonData).to.have.property('fullName');",
              "    pm.expect(jsonData).to.have.property('role');",
              "    ",
              "    // Store the user ID for future tests",
              "    if (jsonData.id) {",
              "        pm.collectionVariables.set('userId', jsonData.id);",
              "    }",
              "});"
            ]
          }
        }
      ],
      "response": []
    },
    {
      "name": "Get User Info",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/auth/user/{{userId}}",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "user", "{{userId}}"]
        },
        "description": "Get user information by ID"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has user information\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData).to.have.property('email');",
              "    pm.expect(jsonData).to.have.property('fullName');",
              "    pm.expect(jsonData).to.have.property('phoneNumber');",
              "    pm.expect(jsonData).to.have.property('role');",
              "});"
            ]
          }
        }
      ],
      "response": []
    },
    {
      "name": "Update User Profile",
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"fullName\": \"Updated Test User\",\n    \"phoneNumber\": \"9876543210\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/auth/user/{{userId}}",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "user", "{{userId}}"]
        },
        "description": "Update user profile"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has expected message\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('message');",
              "    pm.expect(jsonData.message).to.eql('Profile updated successfully');",
              "});"
            ]
          }
        }
      ],
      "response": []
    },
    {
      "name": "Reset Password",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"email\": \"{{userEmail}}\",\n    \"otp\": \"{{userOtp}}\",\n    \"newPassword\": \"newpassword123\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/auth/password/reset",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "password", "reset"]
        },
        "description": "Reset user password with OTP"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has expected message\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('message');",
              "    pm.expect(jsonData.message).to.eql('Password reset successfully');",
              "});"
            ]
          }
        }
      ],
      "response": []
    },
    {
      "name": "Change Password",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"userId\": \"{{userId}}\",\n    \"currentPassword\": \"{{userPassword}}\",\n    \"newPassword\": \"newpassword123\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/auth/change-password",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "change-password"]
        },
        "description": "Change user password"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has expected message\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('message');",
              "    pm.expect(jsonData.message).to.eql('Password changed successfully');",
              "});"
            ]
          }
        }
      ],
      "response": []
    },
    {
      "name": "Logout",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"userId\": \"{{userId}}\",\n    \"fcmToken\": \"sample_fcm_token\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/auth/logout",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "logout"]
        },
        "description": "Log out user and clear FCM token"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has expected message\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('message');",
              "    pm.expect(jsonData.message).to.eql('Logged out successfully');",
              "});"
            ]
          }
        }
      ],
      "response": []
    },
    {
      "name": "Register Shipper",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"user\": {\n        \"email\": \"shipper@example.com\",\n        \"password\": \"password123\",\n        \"name\": \"Shipper Test\"\n    },\n    \"shipper\": {\n        \"phone\": \"9876543210\",\n        \"vehicleType\": \"motorbike\",\n        \"licensePlate\": \"ABC-123\"\n    }\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/auth/shipper/register",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "shipper", "register"]
        },
        "description": "Register a new shipper"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test(\"Response has expected message\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('message');",
              "    pm.expect(jsonData.message).to.eql('Shipper registration submitted successfully');",
              "});",
              "",
              "pm.test(\"Response has userId\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('userId');",
              "});"
            ]
          }
        }
      ],
      "response": []
    },
    {
      "name": "Get Pending Shippers",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/auth/shippers/pending",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "shippers", "pending"]
        },
        "description": "Get list of pending shipper registrations"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has shippers array\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('shippers');",
              "    pm.expect(jsonData.shippers).to.be.an('array');",
              "});"
            ]
          }
        }
      ],
      "response": []
    },
    {
      "name": "Update Shipper Status",
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"status\": \"approved\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/auth/shipper/{{userId}}/status",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "shipper", "{{userId}}", "status"]
        },
        "description": "Update shipper approval status"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has expected message\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('message');",
              "    pm.expect(jsonData.message).to.eql('Shipper status updated successfully');",
              "});"
            ]
          }
        }
      ],
      "response": []
    }
  ]
} 