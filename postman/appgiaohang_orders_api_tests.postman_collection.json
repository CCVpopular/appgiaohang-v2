{
  "info": {
    "_postman_id": "c2f40da3-48fa-4e18-964e-70db1c10a3b1",
    "name": "AppGiaoHang - Orders API Tests",
    "description": "Collection for testing Orders API endpoints in appgiaohang-v2",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "1",
      "type": "string"
    },
    {
      "key": "orderId",
      "value": "1",
      "type": "string"
    },
    {
      "key": "storeId",
      "value": "1",
      "type": "string"
    },
    {
      "key": "shipperId",
      "value": "2",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Create Order",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"userId\": \"{{userId}}\",\n    \"address\": \"123 Test Street\",\n    \"latitude\": 10.7758439,\n    \"longitude\": 106.7017555,\n    \"store_address\": \"456 Store Street\",\n    \"store_latitude\": 10.7756587,\n    \"store_longitude\": 106.7004238,\n    \"items\": [\n        {\n            \"foodId\": 1,\n            \"quantity\": 2,\n            \"price\": 10.99,\n            \"storeId\": \"{{storeId}}\"\n        },\n        {\n            \"foodId\": 2,\n            \"quantity\": 1,\n            \"price\": 8.99,\n            \"storeId\": \"{{storeId}}\"\n        }\n    ],\n    \"totalAmount\": 30.97,\n    \"paymentMethod\": \"cash\",\n    \"note\": \"Please deliver quickly\",\n    \"shippingFee\": 5\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/orders",
          "host": ["{{baseUrl}}"],
          "path": ["orders"]
        },
        "description": "Create a new order"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test(\"Response has message and orderId\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('message');",
              "    pm.expect(jsonData).to.have.property('orderId');",
              "    ",
              "    // Store the order ID for future tests",
              "    if (jsonData.orderId) {",
              "        pm.collectionVariables.set('orderId', jsonData.orderId);",
              "    }",
              "});"
            ]
          }
        }
      ],
      "response": []
    },
    {
      "name": "Get User Orders",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/orders/user/{{userId}}",
          "host": ["{{baseUrl}}"],
          "path": ["orders", "user", "{{userId}}"]
        },
        "description": "Get all orders for a specific user"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response is an array\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('array');",
              "});"
            ]
          }
        }
      ],
      "response": []
    },
    {
      "name": "Get Confirmed Orders",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/orders/confirmed",
          "host": ["{{baseUrl}}"],
          "path": ["orders", "confirmed"]
        },
        "description": "Get orders with confirmed status for shippers to accept"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response is an array\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('array');",
              "});"
            ]
          }
        }
      ],
      "response": []
    },
    {
      "name": "Get Pending Orders",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/orders/pending",
          "host": ["{{baseUrl}}"],
          "path": ["orders", "pending"]
        },
        "description": "Get orders with pending status"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response is an array\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('array');",
              "});"
            ]
          }
        }
      ],
      "response": []
    },
    {
      "name": "Get Store Orders",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/orders/store/{{storeId}}",
          "host": ["{{baseUrl}}"],
          "path": ["orders", "store", "{{storeId}}"]
        },
        "description": "Get all orders for a specific store"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response is an array\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('array');",
              "});"
            ]
          }
        }
      ],
      "response": []
    },
    {
      "name": "Store Review Order - Accept",
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"status\": \"accepted\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/orders/{{orderId}}/review",
          "host": ["{{baseUrl}}"],
          "path": ["orders", "{{orderId}}", "review"]
        },
        "description": "Store reviews and accepts an order"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has message and new status\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('message');",
              "    pm.expect(jsonData).to.have.property('newStatus');",
              "    pm.expect(jsonData.newStatus).to.eql('confirmed');",
              "});"
            ]
          }
        }
      ],
      "response": []
    },
    {
      "name": "Store Review Order - Reject",
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"status\": \"rejected\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/orders/{{orderId}}/review",
          "host": ["{{baseUrl}}"],
          "path": ["orders", "{{orderId}}", "review"]
        },
        "description": "Store reviews and rejects an order"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has message and new status\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('message');",
              "    pm.expect(jsonData).to.have.property('newStatus');",
              "    pm.expect(jsonData.newStatus).to.eql('cancelled');",
              "});"
            ]
          }
        }
      ],
      "response": []
    },
    {
      "name": "Shipper Accept Order",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"shipperId\": \"{{shipperId}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/orders/{{orderId}}/accept",
          "host": ["{{baseUrl}}"],
          "path": ["orders", "{{orderId}}", "accept"]
        },
        "description": "Shipper accepts an order"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has success and message\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('success');",
              "    pm.expect(jsonData).to.have.property('message');",
              "    pm.expect(jsonData.success).to.be.true;",
              "});"
            ]
          }
        }
      ],
      "response": []
    },
    {
      "name": "Shipper Start Delivery",
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"shipperId\": \"{{shipperId}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/orders/{{orderId}}/start-delivery",
          "host": ["{{baseUrl}}"],
          "path": ["orders", "{{orderId}}", "start-delivery"]
        },
        "description": "Shipper starts delivery of an order"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has success and message\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('success');",
              "    pm.expect(jsonData).to.have.property('message');",
              "    pm.expect(jsonData.success).to.be.true;",
              "});"
            ]
          }
        }
      ],
      "response": []
    },
    {
      "name": "Shipper Complete Delivery",
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"shipperId\": \"{{shipperId}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/orders/{{orderId}}/complete-delivery",
          "host": ["{{baseUrl}}"],
          "path": ["orders", "{{orderId}}", "complete-delivery"]
        },
        "description": "Shipper completes delivery of an order"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has success and message\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('success');",
              "    pm.expect(jsonData).to.have.property('message');",
              "    pm.expect(jsonData.success).to.be.true;",
              "});"
            ]
          }
        }
      ],
      "response": []
    },
    {
      "name": "Get Shipper Active Deliveries",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/orders/shipper/{{shipperId}}/active",
          "host": ["{{baseUrl}}"],
          "path": ["orders", "shipper", "{{shipperId}}", "active"]
        },
        "description": "Get active deliveries for a shipper"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response is an array\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('array');",
              "});"
            ]
          }
        }
      ],
      "response": []
    },
    {
      "name": "Get Shipper Completed Orders",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/orders/shipper/{{shipperId}}/completed",
          "host": ["{{baseUrl}}"],
          "path": ["orders", "shipper", "{{shipperId}}", "completed"]
        },
        "description": "Get completed orders for a shipper"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response is an array\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('array');",
              "});"
            ]
          }
        }
      ],
      "response": []
    },
    {
      "name": "Complete Order and Record Earnings",
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"shipperId\": \"{{shipperId}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/orders/{{orderId}}/complete",
          "host": ["{{baseUrl}}"],
          "path": ["orders", "{{orderId}}", "complete"]
        },
        "description": "Complete an order and record shipper earnings"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has message\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('message');",
              "});"
            ]
          }
        }
      ],
      "response": []
    }
  ]
} 