{
  "info": {
    "_postman_id": "e5f40da3-48fa-4e18-964e-70db1c10a3b1",
    "name": "AppGiaoHang - All API Tests",
    "description": "Master collection containing all API tests for appgiaohang-v2",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "1",
      "type": "string"
    },
    {
      "key": "orderId",
      "value": "1",
      "type": "string"
    },
    {
      "key": "storeId",
      "value": "1",
      "type": "string"
    },
    {
      "key": "foodId",
      "value": "1",
      "type": "string"
    },
    {
      "key": "shipperId",
      "value": "2",
      "type": "string"
    },
    {
      "key": "addressId",
      "value": "1",
      "type": "string"
    },
    {
      "key": "userEmail",
      "value": "test@example.com",
      "type": "string"
    },
    {
      "key": "userPassword",
      "value": "password123",
      "type": "string"
    },
    {
      "key": "userOtp",
      "value": "123456",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Users API",
      "item": [
        {
          "name": "Get All Users",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            },
            "description": "Get a list of all users"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has users array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('users');",
                  "    pm.expect(jsonData.users).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"User objects have expected properties\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.users.length > 0) {",
                  "        const user = jsonData.users[0];",
                  "        pm.expect(user).to.have.property('id');",
                  "        pm.expect(user).to.have.property('email');",
                  "        pm.expect(user).to.have.property('full_name');",
                  "        pm.expect(user).to.have.property('phone_number');",
                  "        pm.expect(user).to.have.property('role');",
                  "        pm.expect(user).to.have.property('is_active');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Create User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{userEmail}}\",\n    \"password\": \"{{userPassword}}\",\n    \"fullName\": \"Test User\",\n    \"phoneNumber\": \"1234567890\",\n    \"role\": \"customer\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            },
            "description": "Create a new user"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has expected message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.eql('User created successfully');",
                  "});",
                  "",
                  "pm.test(\"Response has userId\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('userId');",
                  "    ",
                  "    // Store the user ID for future tests",
                  "    if (jsonData.userId) {",
                  "        pm.collectionVariables.set('userId', jsonData.userId);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Update User",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"fullName\": \"Updated User Name\",\n    \"phoneNumber\": \"9876543210\",\n    \"role\": \"shipper\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}"]
            },
            "description": "Update user information by ID"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has expected message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.eql('User updated successfully');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Update User Active Status",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"isActive\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}/active",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}", "active"]
            },
            "description": "Update user active status by ID"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has expected message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.eql('User active status updated successfully');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        }
      ]
    },
    {
      "name": "Auth API",
      "item": [
        {
          "name": "Send OTP",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{userEmail}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/send-otp",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "send-otp"]
            },
            "description": "Send OTP to user's email"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has expected message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.eql('OTP sent successfully');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{userEmail}}\",\n    \"password\": \"{{userPassword}}\",\n    \"fcmToken\": \"sample_fcm_token\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Login with user credentials"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has user information\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('fullName');",
                  "    pm.expect(jsonData).to.have.property('role');",
                  "    ",
                  "    // Store the user ID for future tests",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set('userId', jsonData.id);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{userEmail}}\",\n    \"password\": \"{{userPassword}}\",\n    \"fullName\": \"Test User\",\n    \"phoneNumber\": \"1234567890\",\n    \"otp\": \"{{userOtp}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new user"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has expected message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.eql('User registered successfully');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        }
      ]
    },
    {
      "name": "Stores & Foods API",
      "item": [
        {
          "name": "Create Store",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Test Store\",\n    \"address\": \"123 Test Street\",\n    \"phone_number\": \"1234567890\",\n    \"owner_id\": \"{{userId}}\",\n    \"latitude\": 10.7756587,\n    \"longitude\": 106.7004238\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/stores",
              "host": ["{{baseUrl}}"],
              "path": ["stores"]
            },
            "description": "Create a new store"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has store information\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    ",
                  "    // Store the store ID for future tests",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set('storeId', jsonData.id);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Create Food",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Test Food\",\n    \"description\": \"Delicious test food\",\n    \"price\": 10.99,\n    \"storeId\": \"{{storeId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/foods",
              "host": ["{{baseUrl}}"],
              "path": ["foods"]
            },
            "description": "Create a new food item"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has food information\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    ",
                  "    // Store the food ID for future tests",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set('foodId', jsonData.id);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "response": []
        }
      ]
    },
    {
      "name": "Orders API",
      "item": [
        {
          "name": "Create Order",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"userId\": \"{{userId}}\",\n    \"address\": \"123 Test Street\",\n    \"latitude\": 10.7758439,\n    \"longitude\": 106.7017555,\n    \"store_address\": \"456 Store Street\",\n    \"store_latitude\": 10.7756587,\n    \"store_longitude\": 106.7004238,\n    \"items\": [\n        {\n            \"foodId\": \"{{foodId}}\",\n            \"quantity\": 2,\n            \"price\": 10.99,\n            \"storeId\": \"{{storeId}}\"\n        }\n    ],\n    \"totalAmount\": 21.98,\n    \"paymentMethod\": \"cash\",\n    \"note\": \"Please deliver quickly\",\n    \"shippingFee\": 5\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/orders",
              "host": ["{{baseUrl}}"],
              "path": ["orders"]
            },
            "description": "Create a new order"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has message and orderId\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('orderId');",
                  "    ",
                  "    // Store the order ID for future tests",
                  "    if (jsonData.orderId) {",
                  "        pm.collectionVariables.set('orderId', jsonData.orderId);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Store Review Order - Accept",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"status\": \"accepted\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/orders/{{orderId}}/review",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "{{orderId}}", "review"]
            },
            "description": "Store reviews and accepts an order"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has message and new status\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('newStatus');",
                  "    pm.expect(jsonData.newStatus).to.eql('confirmed');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Shipper Accept Order",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"shipperId\": \"{{shipperId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/orders/{{orderId}}/accept",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "{{orderId}}", "accept"]
            },
            "description": "Shipper accepts an order"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success and message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "response": []
        }
      ]
    },
    {
      "name": "Addresses API",
      "item": [
        {
          "name": "Add Address",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"userId\": \"{{userId}}\",\n    \"address\": \"123 Test Street\",\n    \"latitude\": 10.7758439,\n    \"longitude\": 106.7017555\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/addresses",
              "host": ["{{baseUrl}}"],
              "path": ["addresses"]
            },
            "description": "Add a new address"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201 or 200\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Response has message and addressId\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('addressId');",
                  "    ",
                  "    // Store the address ID for future tests",
                  "    if (jsonData.addressId) {",
                  "        pm.collectionVariables.set('addressId', jsonData.addressId);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "response": []
        }
      ]
    },
    {
      "name": "Chat API",
      "item": [
        {
          "name": "Send Chat Message",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"orderId\": \"{{orderId}}\",\n    \"senderId\": \"{{userId}}\",\n    \"receiverId\": \"{{shipperId}}\",\n    \"message\": \"Hello, this is a test message\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/chat",
              "host": ["{{baseUrl}}"],
              "path": ["chat"]
            },
            "description": "Send a new chat message"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has id\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        }
      ]
    },
    {
      "name": "Transactions API",
      "item": [
        {
          "name": "Deposit Money",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"userId\": \"{{userId}}\",\n    \"amount\": 100\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/transactions/deposit",
              "host": ["{{baseUrl}}"],
              "path": ["transactions", "deposit"]
            },
            "description": "Deposit money to user balance"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has expected message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.eql('Deposit successful');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        }
      ]
    }
  ]
} 